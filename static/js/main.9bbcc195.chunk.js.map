{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","index.js"],"names":["Square","props","react_default","a","createElement","className","highlightWinSquares","onClick","updateStateOnClick","value","Board","highlightSquares","i","_this","winningSquares","length","indexOf","generateRow","index","max","rows","push","renderSquare","generateBoard","columns","board","key","_this2","this","highlight","components_Square","squares","React","Component","Game","initialize","history","Array","fill","location","col","row","active","moveNumber","xIsNext","stepNumber","toggle","state","reset","setState","jumpTo","step","forEach","item","handleClick","slice","Math","floor","calculateWinner","prevState","concat","toggleMoves","lines","_lines$i","Object","slicedToArray","b","c","status","win","player","filter","current","result","gameStatus","moves","map","move","desc","sort","components_Board","ReactDOM","render","components_Game","document","getElementById"],"mappings":"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","file":"static/js/main.9bbcc195.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Square = props => {\n  return (\n    <button\n      className={props.highlightWinSquares}\n      onClick={props.updateStateOnClick}\n    >\n      {props.value}\n    </button>\n  );\n};\n\nexport default Square;\n","import React from \"react\";\nimport Square from \"./Square\";\nimport \"../index.css\";\n\nclass Board extends React.Component {\n  highlightSquares = i => {\n    if (this.props.winningSquares.length > 0) {\n      if (this.props.winningSquares.indexOf(i) > -1) {\n        return \"square winningSquares\";\n      } else {\n        return \"square\";\n      }\n    } else {\n      return \"square\";\n    }\n  };\n\n  renderSquare(i) {\n    let highlight = this.highlightSquares(i);\n    return (\n      <Square\n        key={i}\n        highlightWinSquares={highlight}\n        value={this.props.squares[i]}\n        updateStateOnClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  generateRow = (index, max) => {\n    let rows = [];\n\n    for (index; index < max; index++) {\n      rows.push(this.renderSquare(index));\n    }\n    return rows;\n  };\n\n  generateBoard = (columns, rows) => {\n    let board = [];\n\n    /**\n     * Generate (col * row, here, 3 * 3 = 9) squares\n     */\n    for (let i = 0; i < columns * rows; i++) {\n      /**\n       * Generate columns.\n       *\n       * Only allow multiples of \"number of columns\".\n       * For example, if number of columns is 3, then,\n       * 3, 6, 9.\n       */\n      if (i % columns === 0) {\n        board.push(\n          <div className=\"board-row\" key={i}>\n            {this.generateRow(i, i + columns)}\n          </div>\n        );\n      }\n    }\n    return board;\n  };\n\n  render() {\n    return (\n      <div>\n        <div>{this.generateBoard(3, 3)}</div>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React from \"react\";\nimport Board from \"./Board\";\nimport \"../index.css\";\n\nclass Game extends React.Component {\n  /**\n   * Initial state of the game\n   */\n  initialize = () => {\n    return {\n      history: [\n        {\n          squares: Array(9).fill(null),\n          location: {\n            col: 0,\n            row: 0\n          },\n          active: false,\n          moveNumber: 0\n        }\n      ],\n      xIsNext: true,\n      stepNumber: 0,\n      toggle: false\n    };\n  };\n\n  state = this.initialize();\n\n  reset = () => {\n    this.setState(this.initialize());\n  };\n\n  jumpTo = step => {\n    let history = this.state.history;\n\n    history.forEach(item => {\n      item.active = false;\n    });\n\n    history[step].active = true;\n    this.setState({\n      history: history,\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  };\n\n  handleClick = i => {\n    /**\n     * If we jumped to some previous step, and then make\n     * a new move from that point, we throw away all \"future\"\n     * history that will now become irrelevant.\n     *\n     * slice(startingPoint, endPoint)\n     *\n     * startingPoint - Array index from where the \"slicing\" starts.\n     * endPoint - All array indices less than endPoint will be included in \"slicing\"\n     */\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    const columns = 3;\n\n    /**\n     * Calculate location of square when clicked\n     */\n    const col = Math.floor(i % columns) + 1;\n    const row = Math.floor(i / columns) + 1;\n\n    if (this.calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n\n    /**\n     * concat() method does not mutate the Array\n     * unlike Array.push().\n     */\n    this.setState(prevState => ({\n      history: history.concat([\n        {\n          squares: squares,\n          location: {\n            col: col,\n            row: row\n          },\n          active: false,\n          moveNumber: history.length\n        }\n      ]),\n      xIsNext: !prevState.xIsNext,\n      stepNumber: history.length\n    }));\n  };\n\n  toggleMoves = () => {\n    const toggle = !this.state.toggle;\n    this.setState({\n      toggle: toggle\n    });\n  };\n\n  calculateWinner = squares => {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n    let result = {\n      status: \"\",\n      win: {}\n    };\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (\n        squares[a] &&\n        squares[a] === squares[b] &&\n        squares[a] === squares[c]\n      ) {\n        result = {\n          status: \"win\",\n          win: { player: squares[a], squares: [a, b, c] }\n        };\n        return result;\n      } else {\n        let tempSq = squares.filter(item => item === null);\n        if (tempSq.length === 0) {\n          result = { status: \"draw\", win: {} };\n          return result;\n        }\n      }\n    }\n    return null;\n  };\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const result = this.calculateWinner(current.squares);\n    const gameStatus = result && result.status ? result.status : null;\n\n    const moves = history.map((move, index) => {\n      const desc = index ? \"Go to move #\" + index : \"Go to game start\";\n\n      let active = \"\";\n      if (move.active) {\n        active = \"active\";\n      } else {\n        active = \"normal\";\n      }\n      return (\n        <li key={index}>\n          <button\n            className={active}\n            key={`${move.location.col}_${move.location.row}`}\n            onClick={() => this.jumpTo(index)}\n          >\n            {`${desc} (${move.location.col}, ${move.location.row})`}\n          </button>\n        </li>\n      );\n    });\n\n    /**\n     * If this.state.toggle is \"true\", sort in\n     * \"decending order\" and vice versa.\n     */\n    moves.sort((a, b) => {\n      if (this.state.toggle) {\n        return b.key - a.key;\n      } else {\n        return a.key - b.key;\n      }\n    });\n\n    let status;\n\n    if (gameStatus === \"win\") {\n      status = `Winner: ${result.win.player}`;\n    } else {\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    }\n    return (\n      <div className=\"game\">\n        {/** If there is a draw, hide the game board and show \n          \"Play again\" button */\n        gameStatus === \"draw\" ? (\n          <div className=\"draw\">\n            <h2>Draw!</h2>\n            <button onClick={() => this.reset()}>Play again</button>\n          </div>\n        ) : (\n          /** Otherwise, show the game board */\n          <div className=\"game-board\">\n            <Board\n              squares={current.squares}\n              winningSquares={gameStatus === \"win\" ? result.win.squares : []}\n              onClick={(i, col, row) => this.handleClick(i, col, row)}\n            />\n            {/** Depending upon the state of the game, either show \n              \"Play again\" button or \"Reset game\" button */\n            gameStatus === \"win\" ? (\n              <div className=\"win\">\n                <h2>{`\"${result.win.player}\" is winner!`}</h2>\n                <button onClick={() => this.reset()}>Play again</button>\n              </div>\n            ) : (\n              <div className=\"reset\">\n                <button onClick={() => this.reset()}>Reset game</button>\n              </div>\n            )}\n          </div>\n        )}\n\n        <div className=\"game-info\">\n          <div>{status}</div>\n          {/** Show the toggle button only if there are two or more moves to sort */\n          history.length > 1 ? (\n            <button onClick={() => this.toggleMoves()}>Toggle moves</button>\n          ) : (\n            \"\"\n          )}\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Game from \"./components/Game\";\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}